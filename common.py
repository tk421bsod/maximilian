#common.py: a shared library containing a bunch of useful stuff
import subprocess
import logging

class Version:
    __slots__ = ("major", "minor", "micro")

    def __init__(self):
        self.major = 0
        self.minor = 0
        self.micro = 0

#TimeConverter originally from cogs/reminders.py
class TimeConverter(commands.Converter):
    __slots__ = ("time_regex", "time_dict")
    def __init__(self):
        self.time_regex = re.compile(r"(\d{1,5}(?:[.,]?\d{1,5})?)([smhd])")
        self.time_dict = {"h":3600, "s":1, "m":60}

    async def convert(self, ctx, argument):
        matches = self.time_regex.findall(argument.lower())
        time = 0
        if argument == "add":
            await ctx.send("The 'add' option was removed in 1.1.0. Remove it from the command so the time value gets interpreted correctly.")
        for v, k in matches:
            try:
                time += self.time_dict[k]*float(v)
            except KeyError:
                raise commands.BadArgument(f"{k} is an invalid unit of time! only h/m/s are valid!")
            except ValueError:
                raise commands.BadArgument(f"{v} is not a number!")
        if time == 0:
            raise commands.BadArgument("Sorry, that amount of time is invalid.")
        return time

def load_config():
    '''Loads configuration data from the config file generated by setup.sh.'''
    config = {}
    #Uncomment the following line to suppress KeyErrors that can happen when trying to access config. This may break stuff.
    #import collections; config = collections.defaultdict(lambda: None)
    with open('config', 'r') as configfile:
        for i in configfile.readlines():
            if not i.strip().startswith('#') and i.strip():
                i = i.strip().split(':',1)
                config[i[0]] = i[1]
    return config

def run_command(cmd):
    if logging.root.level == logging.DEBUG:
        logging.getLogger('common').debug(f"Calling run_command with \"{cmd}\"")
    p = subprocess.run(cmd, shell=True, capture_output=True, encoding="utf-8")
    if logging.root.level == logging.DEBUG:
        logging.getLogger('common').debug({"output":p.stdout.strip().split("\n"), "returncode":p.returncode})
    return {"output":p.stdout.strip().split("\n"), "returncode":p.returncode}

def get_latest_commit():
    try:
        return run_command("git rev-parse --short HEAD")['output']
    except Exception:
        pass

def get_value(dict, key, default=None):
    try:
        return dict[key]
    except KeyError:
        return default

def set_value(dict, key, value, unique=False):
    try:
        dict[key]
        if not unique:
            dict[key] = value
    except KeyError:
        dict[key] = value

if __name__ == "__main__":
    import sys; print(f"It looks like you're trying to run {sys.argv[0]} directly.\nThis module provides a set of APIs for other modules and doesn't do much on its own.\nLooking to run Maximilian? Just run main.py.")
